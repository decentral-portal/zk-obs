import { ethers } from 'ethers';
import commitmentData from '../test/example/zkobs-p1/0_register-acc1-p5-commitment.json';
import calldata from '../test/example/zkobs-p1/0_register-acc1-p5-8-8-4-8-calldata-raw.json';
const F_field =
  21888242871839275222246405745257275088548364400416034343698204186575808495617n;
const raw253 =
  '1001011010010011000010010000000110000010010111100111001100100101001010001110100101001111110110010111000111001101101001011101101001110101101100000011010010111010000100011110101010111101110010101010101010001000110011001111111101010001001100111011010100011';
const rawSha256 =
  '0101001011010010011000010010000000110000010010111100111001100100101001010001110100101001111110110010111000111001101101001011101101001110101101100000011010010111010000100011110101010111101110010101010101010001000110011001111111101010001001100111011010100011';
const rawSha256r = rawSha256.split('').reverse().join('');
const raw =

async function main() {
  const rawb = {
    a: raw.slice(256 * 0, 256 * 1),
    b: raw.slice(256 * 1, 256 * 2),
    c: raw.slice(256 * 2, 256 * 3),
    d: raw.slice(256 * 3),
  };
  console.log({
    rawb,
    a: toHex('0b' + rawb.a),
    b: toHex('0b' + rawb.b),
    c: toHex('0b' + rawb.c),
    d: toHex('0b' + rawb.d),
    commitmentData,
  });
  const commitmentMessage = ethers.utils.solidityPack(
    ['bytes32', 'bytes32', 'bytes32', 'bytes'],
    [
      commitmentData.oriStateRoot,
      commitmentData.newStateRoot,
      commitmentData.newTsRoot,
      commitmentData.pubdata,
    ],
  );
  const commitmentHashOrigin = ethers.utils.sha256(commitmentMessage);

  const verifyInput = toHex(
    BigInt(
      '0b' +
        BigInt(commitmentHashOrigin).toString(2).padStart(256, '0').slice(3),
    ),
  );

  console.log({
    commitmentMessage,
    commitmentHashOrigin,
    verifyInput,
    actualInput: calldata[3][0],
    isCommitmentSame: verifyInput === calldata[3][0],
  });
}

function toHex(n: string | BigInt) {
  const num = typeof n === 'bigint' ? n : BigInt(n as string);
  const rawHex = num.toString(16);
  return '0x' + (rawHex.length % 2 === 0 ? rawHex : '0' + rawHex);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
