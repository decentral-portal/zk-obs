Table ObsOrder {
  id integer [pk]
  side integer
  txId integer // create order id, nullable
  reqType integer //
  accountId decimal
  marketPair string // ETH/USDC
  price decimal // if buy, price = buyAmt/sellAmt,  sellAmt/buyAmt
  orderStatus integer // pending=1, canceled , matched 
  mainQuantity decimal //  USDC - 6, ETH - 18 
  baseQuantity decimal
  remainMQ decimal //
  remainBQ decimal
  accumulatedSellAmt decimal
  accumulatedBuyAmt decimal
  mainTokenId integer
  baseTokenId integer
  timestamp timestamp(3) // unix time
  isMaker boolean
  orderLeafId integer // nullable
}

Table ObsOrderLeaf {
  orderLeafId integer [pk]
  txId integer // create order id, nullable
  reqType integer //
  sender decimal
  sellTokenId decimal //  USDC - 6, ETH - 18
  sellAmt decimal
  buyTokenId decimal
  buyAmt decimal
  accumulatedSellAmt decimal
  accumulatedBuyAmt decimal
  orderId integer
}
Ref: ObsOrder.id - ObsOrderLeaf.orderId
Table ObsOrderLeafMerkleTreeNode {
  id decimal [pk]
  hash decimal
  leafId decimal
}
Ref: ObsOrderLeafMerkleTreeNode.leafId - ObsOrderLeaf.orderLeafId
Ref: Transaction.List.txId - ObsOrder.txId
Table MatchObsOrder {
  id integer [pk]
  side integer // buy, sell
  txId integer  // craete match id, nullable
  txId2 integer
  referenceOrder integer(id)
  reqType integer // Buy , Sell
  marketPair string // ETH/USDC
  matchedMQ decimal
  matchedBQ decimal
  timestamp timestamp
  orderStatus integer // matched = 1, L2executed = 2 , L2confirmed = 4, L1confirmed=8
}
Ref: MatchObsOrder.referenceOrder > ObsOrder.id
Ref: Transaction.List.txId - MatchObsOrder.txId
Ref: Transaction.List.txId - MatchObsOrder.txId2
Table Account.Information {
  L1Address varchar [pk]
  accountId decimal
  
  email varchar
  password varchar
  refreshToken varchar
  lastedLoginIp varchar
  lastLoginTime datetime

  createdAt datetime
  createdBy varchar
  updatedAt datetime
  updatedBy varchar
  deletedAt datetime
  deletedBy varchar
  label jsonb
  labeledBy varchar
}
Ref: Account.Information.accountId - Account.MerkleTreeNode.leafId
Ref: Transaction.List.accountId - Account.Information.accountId

Table Account.MerkleTreeNode {
  id decimal [pk]
  hash decimal
  
  leafId decimal // accountId
}

Table Account.LeafNode {
  leafId decimal [pk]
  tsAddr decimal
  nonce decimal
  tokenRoot decimal
}
Ref: Account.LeafNode.leafId - Account.MerkleTreeNode.leafId


Table Token.MerkleTreeNode {
  accountId decimal [pk]
  id decimal [pk]
  hash decimal
  leafId decimal
}
Ref: Token.MerkleTreeNode.accountId > Account.MerkleTreeNode.leafId

Table Token.LeafNode {
  leafId decimal [pk]
  accountId decimal [pk]
  availableAmt decimal
  lockedAmt decimal
}

Ref: Token.LeafNode.leafId - Token.MerkleTreeNode.leafId
Table BlockInformation {
  blockNumber integer [pk]
  blockHash varchar
  
  L1TransactionHash varchar
  verifiedAt datetime
  operatorAddress varchar
  rawData text
  
  calldata json
  proof json
  
  blockStatus enum
  
  createdAt datetime
  updatedAt datetime
  updatedBy varchar
  deletedAt datetime
  deletedBy varchar
}
Ref: BlockInformation.blockNumber < Transaction.List.blockNumber
Table Transaction.List {
  txId integer [pk, increment]
  blockNumber integer  
  reqType decimal
  accountId decimal
  tokenId decimal
  
  accumulatedSellAmt decimal
  accumulatedBuyAmt decimal
  
  amount decimal
  nonce decimal
  eddsaSig json
  ecdsaSig varchar(256)
  
  args0 decimal
  args1 decimal
  args2 decimal
  args3 decimal
  args4 decimal
  
  fee   decimal
  feeToken decimal
  
  metadata json
  txStatus enum
  createdAt datetime
  updatedAt datetime
  updatedBy varchar
  deletedAt datetime
  deletedBy varchar
}

Table CandleStick {
  id integer [pk]
  timestamp datetime
  maxPrice varchar
  minPrice varchar
  openPrice varchar
  closePrice varchar
  volume varchar
  marketPair varchar
}


Table MarketPairInfo {
  id integer [pk]
  mainTokenId decimal
  baseTokenId decimal
  marketPair varchar // ETH/USDC
}
